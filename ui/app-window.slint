import { Button, HorizontalBox, LineEdit, ListView, StandardListView, VerticalBox } from "std-widgets.slint";
import { DetailsWindow } from "details-window.slint";
import { RecordWrapper } from "record-wrapper.slint";

struct ResultItemData {
    film_name: string,
    support_color: color,
    support_type_text: string,
    film_code: int,
    support_code: int,
}

component ResultItemDisplay {
    in property <ResultItemData> data;
    callback clicked <=> touchArea.clicked;

    HorizontalBox {
        padding: 0px;
        spacing: 5px; // Space between icon and text
        Rectangle {
            border-width: 1px;
            border-color: black;
            // TODO: FontMetrics only has height-related methods!!
            //width: letter.font-metrics.width('O') + 10;
            width: 24px;
            // Why doesn't FontMetrics have height?
            height: letter.font-metrics.ascent - letter.font-metrics.descent /*+ 10px*/;
            background: data.support_color;
            letter := Text {
                width: parent.width;
                height: parent.height;
                text: data.support_type_text;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
        filmNameText := Text {
            text: data.film_name;
            wrap: word-wrap;
            vertical-alignment: center;
        }
    }
    touchArea := TouchArea {
    }
}

export component AppWindow inherits Window {

    default-font-size: 20px;

    in property <string> status; // last DB update etc.
    in property <string> search_error;
    in property <string> details_error;
    in property <[ResultItemData]> result_items;
    in property <RecordWrapper> details_record;

    private property <string> clicked-film-name;

    callback download-db();
    callback search(string);
    callback item-clicked(int, int); // film code, support code

    VerticalBox {
        HorizontalBox {
            searchLineEdit := LineEdit {
                placeholder-text: "Enter search string";
                accepted(text) => {
                    root.search(text);
                }
            }
            Button {
                icon: @image-url("icons/search.svg");
                colorize-icon: true;
                clicked => {
                    root.search(searchLineEdit.text);
                }
            }
        }
        if searchLineEdit.text.is-empty : HorizontalBox {
            HorizontalBox {
                alignment: start;
                Text {
                    text: "\{root.status}";
                    vertical-alignment: center;
                }

                Button {
                    icon: @image-url("icons/reload.png");
                    clicked => {
                        root.download-db();
                    }
                    min-height: searchLineEdit.min-height;
                }
            }
        }
        if !search_error.is-empty : Text {
            text: search_error;
        }
        if search_error.is-empty : resultListView := ListView {
            for result in result_items : ResultItemDisplay {
                data: result;
                width: resultListView.viewport-width;
                clicked => {
                    root.clicked-film-name = self.data.film-name;
                    root.item-clicked(self.data.film-code, self.data.support-code);
                    detailsWindow.show();
                }
            }
            horizontal-scrollbar-policy: always-off;
            vertical-stretch: 1;
            mouse-drag-pan-enabled: true;
        }
    }

    detailsWindow := DetailsWindow {
        film-name: root.clicked-film-name;
        error: root.details_error;
        record: root.details_record;
        visible: false;
        width: root.width;
        height: root.height;
    }
}
